/*
 * Copyright (c) 2021 Arm Limited and Contributors. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 * 
 * This examples captures data from an analog microphone using a sample
 * rate of 8 kHz and prints the sample values over the USB serial
 * connection.
 */
#include <stdio.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"
#include "pico/stdlib.h"
#include "analog_microphone.h"
#include "analog_microphone.c"
#include "tusb.h"

//https://studio.edgeimpulse.com/studio/172452/acquisition/training?page=1
static const float features_[] = {
    // copy raw features here (for example from the 'Live classification' page)
    //tr 2232
    423, 286, 358, 233, 409, 347, 379, -291, 279, 67, 295, 126, 289, -63, 331, 135, 300, 475, 242, 295, -10, 265, 447, 255, 478, 275, 510, 246, 462, 177, 322, 237, 364, 143, 285, 242, 206, -435, 214, 283, 175, 285, 170, 238, 153, 183, 138, 151, 70, 121, -141, 169, -15, 132, 308, 1, 196, 23, 65, 11, 47, -391, 106, -147, 36, -251, 66, 83, 13, 13, -110, -16, -25, 94, -25, -60, 132, -60, -39, -153, -100, -114, 15, -135, -116, -123, -43, -157, -93, -234, -95, -68, -149, -433, -142, -67, -45, -217, -108, -300, -161, 17, -125, 2, -215, -33, -260, -158, -203, -167, -179, -228, -355, -274, -819, -347, -235, -372, -166, -303, -220, -291, -296, -298, -307, -565, -263, -890, -369, -483, -299, -572, -447, -418, -372, -295, -426, -403, -383, -349, -471, -409, -622, -314, -662, -372, -323, -363, -213, -341, -309, -364, -336, -217, -339, -272, -342, -226, -311, -244, -357, -289, -387, -301, -303, -236, -313, -294, -342, -326, -374, -323, -346, -259, -151, -329, -511, -297, -249, -277, -124, -305, -227, -365, -259, -227, -193, -261, -169, -749, -164, -733, -198, -41, -179, -415, -208, -18, -176, -60, 22, 1, -103, -37, 7, -29, -16, 19, -739, 31, 298, -33, -289, 26, 37, -16, 52, -79, 33, 129, 7, -161, 11, 57, -74, 126, -48, 115, 28, 71, -16, -27, 18, -7, -301, -2, -187, 70, 211, 55, 180, 53, -16, -159, 39, -75, 31, 230, -16, 132, -46, 111, -58, 58, -465, 16, -38, 36, -60, -17, -69, -66, -135, -14, 165, 3, 29, 3, 39, -20, 61, -42, 74, -315, -21, 303, -16, 298, 46, 196, 78, -21, 65, 129, -2, 73, 23, 142, -43, -36, 45, 122, 58, 89, -702, 15, -431, 99, 205, 49, -304, 7, -390, 11, 151, 72, 146, 121, 223, 47, 195, -530, 172, -243, 76, -81, 89, -99, 125, 230, 80, 222, 137, 219, 62, 150, 85, 150, 34, 218, 16, 143, -421, 185, 325, 93, 321, 186, 422, 13, 190, 63, 303, 171, 213, 91, 170, -86, 124, 110, 214, 364, 96, 357, 77, 435, 36, -323, 98, 126, 4, 199, 175, 214, 115, 200, 159, 231, 80, 174, -623, 250, 189, 128, 67, 4, 1, -47, 137, 60, 103, 395, 121, -358, 34, -429, 67, 309, 133, 148, 117, 173, 155, 115, 53, 137, -55, 198, 420, 86, 138, 102, 14, 119, 217, 76, 283, 111, 165, -362, 99, -275, 153, -194, 14, 91, 99, 36, 22, -621, -16, 103, 23, -286, -30, -188, -220, -30, 60, -4, 54, -94, -51, -129, 54, -381, 7, 37, -91, -21, -143, -11, -81, -34, -683, -163, 77, 2, 160, -16, -173, -117, 117, -81, 29, -77, -66, -45, 9, -339, -38, 119, -38, -389, 37, 191, -6, 165, -71, 42, -119, -45, -484, -45, -26, -11, -284, 23, -222, -16, 46, -7, 58, -63, 150, 6, 55, -89, 76, 147, 50, 237, -9, 30, -69, 91, -43, 101, -35, 36, -4, -25, 3, 41, 142, 80, -203, 30, -389, 34, 87, -40, 57, -4, 10, -30, -22, 94, 14, 350, 18, 131, 49, 93, 0, 154, 150, 220, 178, 144, -16, 102, 185, 60, 124, 158, 150, 138, 254, 128, 116, 66, 149, 116, 71, -16, 42, -171, 46, 189, 84, 161, 70, -58, 60, -7, 85, 101, 164, 180, -319, 66, -581, 74, -236, 89, -202, 39, 283, 117, 202, 97, 150, 81, -29, 172, 222, 82, 161, 95, 293, 39, 195, 57, 79, 103, 208, 406, 133, 277, 95, 325, 123, 235, 128, 141, 111, 97, 157, 169, 31, 161, -290, 215, -60, 223, -508, 109, 402, 196, 203, 121, 255, 81, 82, 54, 108, 82, 134, 399, 114, -19, 116, 95, 100, 213, 90, 175, 138, -243, 125, -329, 36, 116, 135, 61, 244, 122, 260, 119, 240, 90, 92, 11, 115, -118, 65, 207, 135, 210, 50, 177, 133, 13, 101, 162, 43, 69, 5, -2, -65, -62, -36, -33, 3, 6, -35, -23, 73, -19, 21, -32, -34, -125, -121, -93, -44, -329, -106, -393, -149, -67, -78, -170, -18, -62, 3, 93, 58, 82, 34, 14, -255, 1, 68, -46, 5, -10, 12, -21, -18, -38, -79, -282, -35, -86, -30, -16, -67, -2, 146, 85, 194, -4, -182, -10, 34, 51, 9, -92, -66, -68, -16, -177, -114, -215, -263, -266, -279, -272, -401, -427, -525, -498, -670, -396, -284, -151, 2, 179, 301, 341, 490, 545, 649, 564, 452, 319, 276, 279, 342, 366, 199, 141, 39, 99, 116, 163, 55, -113, -383, -166, -47, -50, 38, -95, -50, -101, 81, 82, 107, -11, 3, 30, 110, 244, 269, 273, 345, 451, 379, 475, 410, 452, 355, 325, 249, 238, 47, 210, 189, 121, 151, 52, 115, -7, -19, -141, -125, -133, -111, -281, -11, -100, 83, 49, 213, 285, 251, 285, 190, 257, 235, 282, 21, 226, 281, 196, 225, 187, 192, 58, 40, -7, 36, 82, 93, 83, 61, 104, 116, 105, 60, -173, -106, -414, -170, -276, -141, -141, -126, -27, -13, 3, 18, -14, -238, 10, -212, 59, -161, 67, 0, 58, -102, -39, -83, -230, -276, -468, -507, -555, -613, -829, -582, -796, -602, -554, -577, -679, -539, -577, -475, -220, -139, -143, -75, -223, 13, 142, 124, 318, 306, 352, 318, 333, 339, 317, 260, 197, 103, 70, -118, -2, -225, -51, -124, -83, -16, -16, 21, -1, -21, -86, -86, -132, -158, -380, -179, -407, -157, -112, -89, -2, 17, 71, 74, 45, 144, 177, 127, 147, 124, 172, 266, 165, 162, 171, 253, 146, 150, 89, 23, 18, -52, -63, -225, -98, -61, -98, -47, -178, 13, 17, 83, 189, 114, 131, 139, 130, 98, 89, 33, -15, -101, -18, -133, -45, 4, -52, -16, -79, -50, -34, -37, -118, -36, -16, -23, 1, 1, -5, -215, 0, 61, -31, -99, -71, -37, -84, -71, -98, -69, -85, -30, -59, -7, -87, -22, -92, -68, -122, -110, -374, -171, -334, -154, -134, -179, -161, -194, -141, -223, -166, -156, -121, -172, -167, -95, -142, -102, -162, -155, -191, -206, -242, -204, -265, -243, -282, -267, -269, -241, -268, -233, -250, -195, -164, -332, 1, 122, 130, 105, 282, 173, 323, 333, 276, 255, 196, 203, 68, 54, -6, -29, -168, -42, -226, -31, 73, -10, 20, -16, -124, -100, -75, -141, -85, -127, -103, -116, -48, -5, 45, 203, 115, 241, 190, 242, 207, 214, 205, 227, 221, 205, 179, 166, 161, 154, 70, 114, 58, 67, -58, 29, 36, 13, 36, -5, -16, -17, -16, -249, -18, -67, -4, -22, -118, 1, 138, 52, 97, 82, 116, 124, 149, 134, 162, 162, 205, 162, 199, 52, 65, -202, -2, 92, -16, -129, -55, -193, -25, -30, -45, -82, -179, -186, -412, -332, -571, -382, -403, -481, -533, -446, -369, -389, -407, -259, -289, -356, -196, -64, -100, -58, -82, -35, -191, -163, -261, -281, -290, -342, -229, -303, -358, -411, -481, -330, -207, -260, -137, -206, -62, -215, -98, -170, -178, -300, -295, -578, -303, -151, -180, 17, -29, 77, 101, 140, 192, 199, 127, 170, 9, 116, 249, 91, 101, 170, 214, 182, 209, 70, 97, 65, 146, 297, 178, 84, 146, 269, 128, 267, 160, 149, 70, 128, 52, 28, -62, 3, -347, 35, -19, 61, 211, 81, 91, 126, 158, 180, 221, 253, 243, -105, 233, 255, 188, 4, 15, -185, -14, 21, -73, -1, 15, -4, 31, 102, 100, 182, 230, 193, 147, -159, 195, -139, 173, 218, 348, 269, 209, 369, 209, 226, 141, 127, 103, 60, -353, 122, 187, 115, 213, 115, 165, 42, 13, -82, -105, -95, -175, -229, -143, -123, -106, -122, -50, 7, -18, -109, 9, -7, -3, 21, 125, 285, 127, 140, 59, 53, -59, -54, -114, -130, -447, -131, -268, -54, 23, 10, 39, 106, 94, 83, 87, -183, 42, -338, -124, -5, 54, 87, 130, 161, -84, -48, -17, 79, 156, 361, 326, 494, 448, 601, 588, 668, 227, 669, 300, 627, 684, 458, 487, 365, 430, 306, 356, 213, 260, 153, 221, 179, 122, -190, 81, 41, -69, -21, -195, -169, -215, -506, -232, -343, -229, -74, -126, -55, 46, 137, 137, 207, 150, 241, 113, 229, 288, 189, 349, 228, 262, 215, 275, 46, 220, -174, 194, 207, 129, -55, 60, 49, -460, -102, -34, -46, -7, -124, -71, -103, -64, -51, -51, 7, 27, 78, 68, 237, 150, 118, 217, 29, 282, 500, 384, 571, 375, 514, 409, 279, 398, 510, 367, 428, 346, 334, 152, 199, 133, 116, 49, 72, -6, 124, -38, 69, -11, -26, -36, -27, 15, 48, -351, -1, 5, -13, -12, -53, 33, -25, 11, -11, 29, -69, -55, -47, -35, -77, -51, -526, -130, -91, -172, -215, -268, -111, -230, -181, -254, -187, -187, -182, -279, -179, -157, -176, -142, -303, -46, -510, -16, -298, 1, 236, 232, 258, 337, 531, 546, 663, 642, 752, 723, 741, 670, 655, 586, 551, 427, 406, 461, 376, 323, 272, 180, 190, 157, 55, 53, 70, -47, -151, -272, -237, -407, -444, -468, -642, -534, -477, -467, -414, -327, -291, -233, -131, 45, -16, 210, 78, 195, 148, 179, 145, 102, 161, 106, 79, 111, 105, 105, -382, 90, -67, 335, 162, 95, 83, 160, 184, 117, 141, 374, 148, 290, 220, 405, 12, 369, 84, 275, 149, 249, 258, 159, 471, 257, 433, 152, -18, 98, 394, 141, 353, 146, 319, 109, 251, 52, 103, 38, 158, 365, 110, 66, 99, 221, 52, 243, 131, 85, -16, 150, -220, 131, 290, 77, 335, 53, 122, 22, 91, 23, 45, 7, 18, 48, 75, 11, 52, -239, 54, -81, 75, 382, 76, -55, 85, 148, 49, 284, 28, 294, 92, 225, 82, 146, 106, 131, 150, 56, -9, 66, 23, 114, 20, 65, 264, 43, 125, 33, 74, 57, 61, 132, 32, -16, 106, 475, 103, 298, 102, -113, 108, 343, 205, -165, 72, 230, -16, 182, -527, 154, 200, 142, 221, 108, 187, 20, 166, 145, 70, 41, 58, 33, 3, 127, 44, -698, -3, -61, -42, -15, -62, 6, 40, -29, 25, -44, -62, -28, -158, 45, -61, -16, -584, -110, -208, -9, -140, -50, 62, 49, -16, -97, -39, -36, -46, -54, -162, -81, -38, -94, -42, -575, -156, -19, -174, -423, -109, 0, -118, -47, -164, -109, -174, -87, -388, -140, -154, -95, -16, -229, 125, -133, -275, -66, 3, -151, -93, -201, -15, -374, -170, -455, -199, 20, -262, 46, -239, -39, -231, -78, -181, -185, -206, -234, -918, -188, -1023, -173, -63, -141, -39, -274, -112, -191, 233, 396, 249, 337, -259, 244, 21, 287, 304, 235, -134, 134, 214, 103, 124, 79, 122, -644, 185, 326, 121, -139, 230, 180, 70, -218, 113, -29, 193, 364, 3, 359, 71, 157, 71, 138, 30, 170, 84, 92, 65, 37, 245, 31, -4, 5, 178, -71, -10, -598, 15, 86, -5, 174, -86, 118, -42, 62, -123, 38, -51, -49, -115, -5, 153, -77, -174, -110, -16, -59, 98, -16, -212, -39, -303, 34, -710, -63, 177, -21, -90, -29, 61, -95, -16, -174, -5, -51, -16, -17, -90, -110, -95, -205, -77, -87, -114, -147, -73, 42, -123, 59, -114, -356, -193, -1, -146, -38, -175, -84, -136, -129, -211, -170, -709, -182, -345, -229, -211, -208, -81, -95, -110, -359, -123, 81, -116, 179, -58, -110, -593, -228, 1, -165, -267, -158, 5, -135, 63, -87, -34, -113, -47, 175, -53, -406, -86, -470, -116, 68, -157, -14, -197, 92, -185, -70, -302, -196, -77, -105, -86, -387, -95, -178, -118, -58, -78, 90, -87, 121, -75, 111, -65, 10, -78, 58, -107, 34, -59, -42, -18, -5, -51, 19, -87, -4, 78, -55, 165, 65, -185, -111, -138, -41, 128, -41, -239, -16, 237, -44, -75, -49, 27, -62, 29, -87, 5, -279, -16, -523, 61, -665, 18, -732, -82, 149, -2, 130, -17, -69, 195, 67, -33, -217, -18, 190, -7, 115, -49, 5, -627, 42, -590, -15, -310, 19, 45, -23, 20, -15, 166, 59, 21, -62, 26, -55, -10, -218, -46, 125, -16, -246, -21, -187, -19, -141, 157, -149, 194, -77, 146, -93, 5, -82, 5, -118, -103, -113, -34, 193, 86, 270, 452, 164, 290, 87, 299, 172, 228, 217, 156, 157, 329, 177, -39, 225, -116, 219, 431, 228, -143, 295, 377, 258, 372, 150, 332, 222, 276, 99, 215, -81, 291, 268, 207, 549, 293, 709, 317, 315, 314, 405, 268, 412, 431, 371, 335, 322, 366, 421, 271, 346, 197, 363, 285, 477, 170, 343, 230, 231, 228, 292, -490, 242, 453, 263, -123, 272, 32, 255, 413, 300, 450, 245, 417, 186, 231, -451, 214, 417, 122, 290, 210, 297, 192, 206, 221, 222, -228, 189, 128, 101, -66, 220, 422, 85, -4, 102, 18, 50, 134, 82, 115, 70, 135, 5, 76, 55, 84, -63, 86, -523, -25, 181, -26, 190, 3, 30, -34, 5, -92, 12, 99, -137, 230, -16, 122, -66, 42, -92, -34, -67, -101, -78, -26, -247, -59, -270, -36, 127, -75, -33, -72, -83, -141, -64, -200, -93, 107, -134, 50, -222, -219, -92, -16, -236, -162, -187, -111, -133, -85, -880, -132, -637, -195, 41, -267, -164, -169, -219, -162, -157, 317, 307, 276, 182, 204, 270, 211, 118, 221, 79, 237, 69, 233, -194, 95, 288, 116, 409, 131, 142, -341, 150, -425, 242, 332, 224, 323, 285, 455, 375, 322, 271
};

// configuration
#define INSIZE EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE //232

const struct analog_microphone_config config = {
    // GPIO to use for input, must be ADC compatible (GPIO 26 - 28)
    .gpio = 26,

    // bias voltage of microphone in volts
    .bias_voltage = 1.25,

    // sample rate in Hz
    .sample_rate = 16000,

    // number of samples to buffer
    .sample_buffer_size = INSIZE,
};

// variables
int16_t sample_buffer[INSIZE];
volatile int samples_read = 0;

float features[INSIZE];

const int minutes = .3;
const int threshold = 10;
const float thresh = 0.9;

int count_label_on = 0;


void on_analog_samples_ready() {
    // callback from library when all the samples in the library
    // internal sample buffer are ready for reading 
    samples_read = analog_microphone_read(sample_buffer, INSIZE);
}


int raw_feature_get_data(size_t offset, size_t length, float * out_ptr) {
    memcpy(out_ptr, features + offset, length * sizeof(float));
    return 0;
}

void wait_for_usb() {
    while (!tud_cdc_connected()) {
        printf(".");
        sleep_ms(500);
    }
    printf("usb host detected\n");
}   

int main(void) {
    // initialize stdio and wait for USB CDC connect
    stdio_init_all();

    wait_for_usb();

    printf("connected\n");


    ei_impulse_result_t result = {
        nullptr
    };

    ei_printf("Edge Impulse standalone inferencing (Raspberry Pi Pico)\n");

    // initialize the analog microphone
    if (analog_microphone_init( & config) < 0) {
        ei_printf("analog microphone initialization failed!\n");
        while (1) {
            tight_loop_contents();
        }
    }

    // set callback that is called when all the samples in the library
    // internal sample buffer are ready for reading
    analog_microphone_set_samples_ready_handler(on_analog_samples_ready);

    // start capturing data from the analog microphone
    if (analog_microphone_start() < 0) {
        ei_printf("Analog microphone start failed!\n");
        while (1) {
            tight_loop_contents();
        }
    }

    if (sizeof(features) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE)
    {
      ei_printf("The size of your 'features' array is not correct. Expected %d items, but had %u\n",
                EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(features) / sizeof(float));
      return 1;
    }

    
    while (1) {


        // wait for new samples
        while (samples_read == 0) {
            tight_loop_contents();
        }


        ei_printf("\nStarting inferencing in 3 seconds...\n");
        sleep_ms(3000);

        // store and clear the samples read from the callback
        int sample_count = samples_read;
        samples_read = 0;
        

        // loop through any new collected samples
        
        for (int i = 0; i < sample_count; i++) { 
            features[i] = sample_buffer[i]; 
        }
        
        
        /*
        printf("sample_count returned: %d\n", sample_count);
        printf("size of features/floats: %d\n", sizeof(features) / sizeof(float));
        printf("EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE:%d\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
        printf("EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME:%d\n", EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME);
        printf("size of features returned: %d\n", sizeof(features));
        printf("total_length: %d\n", sizeof(features) / sizeof(features[0]));
        printf("\n");
        */
        

        // the features are stored into flash, and we don't want to load everything into RAM
        signal_t features_signal;
        features_signal.total_length = sizeof(features) / sizeof(features[0]);
        features_signal.get_data = &raw_feature_get_data;

         
        // invoke the impulse
        EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, false);

        ei_printf("run_classifier returned: %d\n", res);

        
        if (res != 0)
            return 1;

        ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
            result.timing.dsp, result.timing.classification, result.timing.anomaly);

        // print the predictions
        ei_printf("[");
        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
            ei_printf("%s: %.5f", result.classification[ix].label, result.classification[ix].value);

           
            #if EI_CLASSIFIER_HAS_ANOMALY == 1
            ei_printf(", ");
            #else
            if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
                ei_printf(", ");
            }
            #endif
        }
        #if EI_CLASSIFIER_HAS_ANOMALY == 1
        printf("%.3f", result.anomaly);
        #endif
        printf("]\n");
        

    }

    return 0;
}
